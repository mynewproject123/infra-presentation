name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ca-central-1
  ECR_FRONTEND_REPOSITORY: blynk-frontend
  ECR_BACKEND_REPOSITORY: blynk-backend
  S3_BUCKET: blynk-codepipeline-artifacts

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push frontend image
      run: |
        cd frontend
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPOSITORY }}:${{ github.sha }} .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPOSITORY }}:${{ github.sha }}
        echo "FRONTEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV

    - name: Build and push backend image
      run: |
        cd backend
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND_REPOSITORY }}:${{ github.sha }} .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND_REPOSITORY }}:${{ github.sha }}
        echo "BACKEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV

    - name: Create image definitions for ECS
      run: |
        mkdir -p build
        echo '[{"name":"blynk-frontend","imageUri":"'$FRONTEND_IMAGE'"}]' > build/frontend-imagedefinitions.json
        echo '[{"name":"blynk-backend","imageUri":"'$BACKEND_IMAGE'"}]' > build/backend-imagedefinitions.json

    - name: Upload artifact to S3 (optional)
      run: |
        zip -r source.zip build
        if aws s3api head-bucket --bucket ${{ env.S3_BUCKET }} 2>/dev/null; then
          aws s3 cp source.zip s3://${{ env.S3_BUCKET }}/source.zip
        fi

    - name: Register frontend task definition
      run: |
        sed "s|<FRONTEND_IMAGE>|${FRONTEND_IMAGE}|" ecs/frontend-task-def-template.json > frontend-task-def.json
        aws ecs register-task-definition --cli-input-json file://frontend-task-def.json

    - name: Register backend task definition
      run: |
        sed "s|<BACKEND_IMAGE>|${BACKEND_IMAGE}|" ecs/backend-task-def-template.json > backend-task-def.json
        aws ecs register-task-definition --cli-input-json file://backend-task-def.json

    - name: Deploy frontend to ECS
      run: |
        aws ecs update-service \
          --cluster blynk-cluster \
          --service blynk-frontend-service \
          --force-new-deployment

    - name: Deploy backend to ECS
      run: |
        aws ecs update-service \
          --cluster blynk-cluster \
          --service blynk-backend-service \
          --force-new-deployment
